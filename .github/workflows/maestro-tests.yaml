name: E2E CI

on:
  push:
    branches:
      - chore/e2e-ci

jobs:
  e2e-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Ensure npm is at v10.x
        run: npm install -g npm@10

      - name: Clean install dependencies
        run: |
          rm -rf node_modules
          npm install

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: echo "EXPO_TOKEN=${{ secrets.EXPO_TOKEN }}" >> $GITHUB_ENV

      - name: Set Gradle properties
        run: |
          echo "org.gradle.jvmargs=-Xmx4096m" >> gradle.properties

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls /dev/kvm

      - name: Clean up space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android/sdk/.temp
          sudo rm -rf /usr/local/lib/android/sdk/system-images/android-*/google_apis/x86_64/
          sudo rm -rf /usr/local/lib/android/sdk/system-images/android-*/default/x86_64/
          sudo rm -rf /usr/local/lib/android/sdk/.android/avd/*.avd/*.img

      - name: Install Maestro
        run: curl -Ls 'https://get.maestro.mobile.dev' | bash

      - name: Build Android app locally with EAS
        env:
          SENTRY_DISABLE_AUTO_UPLOAD: true
        run: eas build --platform android --profile test --local

      - name: Find APK
        id: find_apk
        run: |
          APK_PATH=$(find . -type f -name "*.apk" | head -n 1)
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      - name: Set up Android Emulator
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 31
          ndk: 25.1.8937393
          target: google_apis_playstore
          arch: arm64-v8a
          force-avd-creation: false
          avd-name: arm64-emulator
          profile: pixel_4
          cores: 4
          disk-size: 6000M
          ram-size: 2048M
          emulator-boot-timeout: 900
          disable-animations: true
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back emulated -partition-size 4096
          pre-emulator-launch-script: |
            echo "Running pre emulator launch script. Printing the working directory now:"
            pwd
          script: |
            echo "Waiting for the emulator to boot up..."
            adb wait-for-device
            until adb shell getprop sys.boot_completed | grep -m 1 '1'; do echo "Waiting for device to boot..."; sleep 10; done
            echo "Device booted. Listing connected devices:"
            adb devices
            adb shell input keyevent 82
            echo "Installing the APK..."
            adb install ${{ env.APK_PATH }} || (adb kill-server && adb start-server && adb devices && adb install ${{ env.APK_PATH }})
            echo "Waiting for the emulator to fully boot..."
            adb wait-for-device
            adb shell 'while [[ $(getprop sys.boot_completed) -ne 1 ]]; do sleep 1; done'
            adb shell 'while [[ $(pm list packages -3) != *"com.comapeo"* ]]; do sleep 1; done'
            echo "Emulator fully booted."
            echo "Running Maestro tests..."
            $HOME/.maestro/bin/maestro test e2e || true
            adb logcat -d > logcat_output.txt

      - name: Upload build outputs (APKs)
        uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: '**/build/outputs/apk/**/*.apk'

      - name: Upload Logcat Output
        uses: actions/upload-artifact@v4
        with:
          name: logcat-output
          path: logcat_output.txt

      - name: Upload Maestro test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-test-results
          path: /home/runner/.maestro/tests/*/

      - name: Upload Screen Recording
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: E2E Screen Recording
          path: ${{ github.workspace }}/recording-e2e-flow.*
